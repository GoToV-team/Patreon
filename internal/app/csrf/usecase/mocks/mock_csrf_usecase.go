// Code generated by MockGen. DO NOT EDIT.
// Source: ./usecase.go

// Package mock_usecase_csrf is a generated GoMock package.
package mock_usecase_csrf

import (
	models "patreon/internal/app/csrf/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsecase is a mock of Usecase interface.
type MockUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUsecaseMockRecorder
}

// MockUsecaseMockRecorder is the mock recorder for MockUsecase.
type MockUsecaseMockRecorder struct {
	mock *MockUsecase
}

// NewMockUsecase creates a new mock instance.
func NewMockUsecase(ctrl *gomock.Controller) *MockUsecase {
	mock := &MockUsecase{ctrl: ctrl}
	mock.recorder = &MockUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsecase) EXPECT() *MockUsecaseMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockUsecase) Check(sessionId string, userId int64, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", sessionId, userId, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockUsecaseMockRecorder) Check(sessionId, userId, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockUsecase)(nil).Check), sessionId, userId, token)
}

// Create mocks base method.
func (m *MockUsecase) Create(sessionId string, userId int64) (models.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", sessionId, userId)
	ret0, _ := ret[0].(models.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockUsecaseMockRecorder) Create(sessionId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsecase)(nil).Create), sessionId, userId)
}
