// Code generated by MockGen. DO NOT EDIT.
// Source: patreon/internal/app/repository/posts_data (interfaces: Repository)

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	models "patreon/internal/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Posts_dataRepository is a mock of Repository interface.
type Posts_dataRepository struct {
	ctrl     *gomock.Controller
	recorder *Posts_dataRepositoryMockRecorder
}

// Posts_dataRepositoryMockRecorder is the mock recorder for Posts_dataRepository.
type Posts_dataRepositoryMockRecorder struct {
	mock *Posts_dataRepository
}

// NewPosts_dataRepository creates a new mock instance.
func NewPosts_dataRepository(ctrl *gomock.Controller) *Posts_dataRepository {
	mock := &Posts_dataRepository{ctrl: ctrl}
	mock.recorder = &Posts_dataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Posts_dataRepository) EXPECT() *Posts_dataRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *Posts_dataRepository) Create(arg0 *models.PostData) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *Posts_dataRepositoryMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*Posts_dataRepository)(nil).Create), arg0)
}

// Delete mocks base method.
func (m *Posts_dataRepository) Delete(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *Posts_dataRepositoryMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*Posts_dataRepository)(nil).Delete), arg0)
}

// ExistsData mocks base method.
func (m *Posts_dataRepository) ExistsData(arg0 int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsData", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsData indicates an expected call of ExistsData.
func (mr *Posts_dataRepositoryMockRecorder) ExistsData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsData", reflect.TypeOf((*Posts_dataRepository)(nil).ExistsData), arg0)
}

// Get mocks base method.
func (m *Posts_dataRepository) Get(arg0 int64) (*models.PostData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*models.PostData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *Posts_dataRepositoryMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*Posts_dataRepository)(nil).Get), arg0)
}

// GetData mocks base method.
func (m *Posts_dataRepository) GetData(arg0 int64) ([]models.PostData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetData", arg0)
	ret0, _ := ret[0].([]models.PostData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetData indicates an expected call of GetData.
func (mr *Posts_dataRepositoryMockRecorder) GetData(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetData", reflect.TypeOf((*Posts_dataRepository)(nil).GetData), arg0)
}

// Update mocks base method.
func (m *Posts_dataRepository) Update(arg0 *models.PostData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *Posts_dataRepositoryMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*Posts_dataRepository)(nil).Update), arg0)
}
