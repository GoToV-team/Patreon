// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: smtp.proto

package smtp

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HtmlBody string   `protobuf:"bytes,1,opt,name=htmlBody,proto3" json:"htmlBody,omitempty"`
	EmailTo  []string `protobuf:"bytes,2,rep,name=emailTo,proto3" json:"emailTo,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_smtp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_smtp_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetHtmlBody() string {
	if x != nil {
		return x.HtmlBody
	}
	return ""
}

func (x *Message) GetEmailTo() []string {
	if x != nil {
		return x.EmailTo
	}
	return nil
}

type Nothing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dummy bool `protobuf:"varint,1,opt,name=dummy,proto3" json:"dummy,omitempty"`
}

func (x *Nothing) Reset() {
	*x = Nothing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_smtp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nothing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nothing) ProtoMessage() {}

func (x *Nothing) ProtoReflect() protoreflect.Message {
	mi := &file_smtp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nothing.ProtoReflect.Descriptor instead.
func (*Nothing) Descriptor() ([]byte, []int) {
	return file_smtp_proto_rawDescGZIP(), []int{1}
}

func (x *Nothing) GetDummy() bool {
	if x != nil {
		return x.Dummy
	}
	return false
}

var File_smtp_proto protoreflect.FileDescriptor

var file_smtp_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x6d, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x73, 0x6d,
	0x74, 0x70, 0x22, 0x3f, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x68, 0x74, 0x6d, 0x6c, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x54, 0x6f, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x54, 0x6f, 0x22, 0x1f, 0x0a, 0x07, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x14,
	0x0a, 0x05, 0x64, 0x75, 0x6d, 0x6d, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x64,
	0x75, 0x6d, 0x6d, 0x79, 0x32, 0x59, 0x0a, 0x0b, 0x53, 0x6d, 0x74, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x53, 0x65, 0x6e, 0x64, 0x12, 0x0d, 0x2e, 0x73, 0x6d,
	0x74, 0x70, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x0d, 0x2e, 0x73, 0x6d, 0x74,
	0x70, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x04, 0x53, 0x74, 0x6f,
	0x70, 0x12, 0x0d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67,
	0x1a, 0x0d, 0x2e, 0x73, 0x6d, 0x74, 0x70, 0x2e, 0x4e, 0x6f, 0x74, 0x68, 0x69, 0x6e, 0x67, 0x42,
	0x08, 0x5a, 0x06, 0x2e, 0x3b, 0x73, 0x6d, 0x74, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_smtp_proto_rawDescOnce sync.Once
	file_smtp_proto_rawDescData = file_smtp_proto_rawDesc
)

func file_smtp_proto_rawDescGZIP() []byte {
	file_smtp_proto_rawDescOnce.Do(func() {
		file_smtp_proto_rawDescData = protoimpl.X.CompressGZIP(file_smtp_proto_rawDescData)
	})
	return file_smtp_proto_rawDescData
}

var file_smtp_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_smtp_proto_goTypes = []interface{}{
	(*Message)(nil), // 0: smtp.Message
	(*Nothing)(nil), // 1: smtp.Nothing
}
var file_smtp_proto_depIdxs = []int32{
	0, // 0: smtp.SmtpService.Send:input_type -> smtp.Message
	1, // 1: smtp.SmtpService.Stop:input_type -> smtp.Nothing
	1, // 2: smtp.SmtpService.Send:output_type -> smtp.Nothing
	1, // 3: smtp.SmtpService.Stop:output_type -> smtp.Nothing
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_smtp_proto_init() }
func file_smtp_proto_init() {
	if File_smtp_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_smtp_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_smtp_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nothing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_smtp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_smtp_proto_goTypes,
		DependencyIndexes: file_smtp_proto_depIdxs,
		MessageInfos:      file_smtp_proto_msgTypes,
	}.Build()
	File_smtp_proto = out.File
	file_smtp_proto_rawDesc = nil
	file_smtp_proto_goTypes = nil
	file_smtp_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// SmtpServiceClient is the client API for SmtpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SmtpServiceClient interface {
	Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Nothing, error)
	Stop(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error)
}

type smtpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSmtpServiceClient(cc grpc.ClientConnInterface) SmtpServiceClient {
	return &smtpServiceClient{cc}
}

func (c *smtpServiceClient) Send(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/smtp.SmtpService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *smtpServiceClient) Stop(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/smtp.SmtpService/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SmtpServiceServer is the server API for SmtpService service.
type SmtpServiceServer interface {
	Send(context.Context, *Message) (*Nothing, error)
	Stop(context.Context, *Nothing) (*Nothing, error)
}

// UnimplementedSmtpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSmtpServiceServer struct {
}

func (*UnimplementedSmtpServiceServer) Send(context.Context, *Message) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedSmtpServiceServer) Stop(context.Context, *Nothing) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}

func RegisterSmtpServiceServer(s *grpc.Server, srv SmtpServiceServer) {
	s.RegisterService(&_SmtpService_serviceDesc, srv)
}

func _SmtpService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmtpServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smtp.SmtpService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmtpServiceServer).Send(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _SmtpService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SmtpServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/smtp.SmtpService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SmtpServiceServer).Stop(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

var _SmtpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "smtp.SmtpService",
	HandlerType: (*SmtpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _SmtpService_Send_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _SmtpService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "smtp.proto",
}
